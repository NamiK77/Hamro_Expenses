@page "/dashboard/expenses"
@using Hamroexpenses.Services
@using Hamroexpenses.Models
@inject IncomeService IncomeService
@inject ExpenseService ExpenseService
@inject UserService UserService
@inject NavigationManager NavigationManager

<head>
    <link href="css/Expenses.css" rel="stylesheet" />
</head>

<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Hamro Expenses</h2>
        </div>
        <ul>
            <li><NavLink href="/dashboard" class="nav-link" Match="NavLinkMatch.All">Home</NavLink></li>
            <li><NavLink href="/dashboard/income" class="nav-link">Income</NavLink></li>
            <li><NavLink href="/dashboard/expenses" class="nav-link">Expenses</NavLink></li>
            <li><NavLink href="/dashboard/debts" class="nav-link">Debts</NavLink></li>
            <li><NavLink href="/dashboard/clear-debts" class="nav-link">Clear Debts</NavLink></li>
            <li><NavLink href="/dashboard/transactions" class="nav-link">Transaction</NavLink></li>
            <li><button class="btn logout-btn" @onclick="Logout">Logout</button></li>
        </ul>
    </div>

    <!-- Main Content Area -->
    <div class="content-area">
        <h3>Expenses Management</h3>
        <p>Track and manage your expenses while keeping track of your total income and remaining balance.</p>

        <!-- Total Balance and Total Expenses Boxes -->
        <div class="summary-boxes">
            <div class="box total-income-box" style="background: rgb(255, 105, 180);">
                <h4>Remaining Balance</h4>
                <p>@RemainingBalance.ToString("C")</p>
            </div>
            <div class="box total-expenses-box" style="background: rgb(0, 204, 255);">
                <h4>Total Expenses</h4>
                <p>@TotalExpenses.ToString("C")</p>
            </div>
        </div>

        <!-- Add Expense Form -->
        <div class="expense-form">
            <h4>Add New Expense</h4>
            <div>
                <label for="expense-description">Description</label>
                <input id="expense-description" type="text" @bind="NewExpense.Description" placeholder="Enter description" />
            </div>
            <div>
                <label for="expense-amount">Amount ($)</label>
                <input id="expense-amount" type="number" @bind="NewExpense.Amount" placeholder="Enter amount" />
            </div>
            <div>
                <label for="expense-category">Category</label>
                <input id="expense-category" type="text" @bind="NewExpense.Category" placeholder="Enter category" />
            </div>
            <div>
                <label for="expense-date">Date</label>
                <input id="expense-date" type="date" @bind="NewExpense.Date" />
            </div>
            <div>
                <label for="expense-tags">Tags (comma-separated)</label>
                <input id="expense-tags" type="text" @bind="TagsInput" placeholder="Enter tags" />
            </div>
            <div>
                <label for="expense-note">Note</label>
                <input id="expense-note" type="text" @bind="NewExpense.Note" placeholder="Enter a note" />
            </div>
            <button class="add-expense-btn" @onclick="CheckAndAddExpense">Add Expense</button>
        </div>

        <!-- Expenses List -->
        <div class="expense-list">
            <h4>Expense Entries</h4>
            <table class="expenses-table">
                <thead>
                    <tr>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Tags</th>
                        <th>Note</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var expense in Expenses)
                    {
                        <tr>
                            <td>@expense.Description</td>
                            <td>@expense.Amount.ToString("C")</td>
                            <td>@expense.Category</td>
                            <td>@expense.Date.ToString("yyyy-MM-dd")</td>
                            <td>@string.Join(", ", expense.Tags)</td>
                            <td>@expense.Note</td>
                            <td>
                                <button @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Insufficient Funds Popup -->
    @if (ShowInsufficientFundsPopup)
    {
        <div class="popup">
            <div class="popup-content">
                <h4>You don't have enough money!</h4>
                <p>Your balance is insufficient to add this expense.</p>
                <button class="btn" @onclick="GoToDebtPage">Go to Debt Page</button>
                <button class="btn" @onclick="ClosePopup">Close</button>
            </div>
        </div>
    }
</div>

@code {
    private List<Expense> Expenses = new();
    private Expense NewExpense = new() { Date = DateTime.Now }; // Initialize with today's date
    private decimal TotalIncome = 0;
    private decimal TotalExpenses = 0;
    private decimal RemainingBalance = 0;
    private bool ShowInsufficientFundsPopup = false;
    private string TagsInput = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            var incomes = IncomeService.GetAllIncomes();
            var expenses = ExpenseService.GetAllExpenses();

            TotalIncome = incomes.Sum(i => i.Amount);
            Expenses = expenses ?? new List<Expense>();
            TotalExpenses = Expenses.Sum(e => e.Amount);
            RemainingBalance = TotalIncome - TotalExpenses;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void CheckAndAddExpense()
    {
        if (RemainingBalance < NewExpense.Amount)
        {
            ShowInsufficientFundsPopup = true;
        }
        else
        {
            AddExpense();
        }
    }

    private void AddExpense()
    {
        try
        {
            if (string.IsNullOrEmpty(NewExpense.Description) || NewExpense.Amount <= 0 || string.IsNullOrEmpty(NewExpense.Category))
            {
                Console.WriteLine("Please enter valid details for the expense.");
                return;
            }

            NewExpense.Tags = TagsInput.Split(',', StringSplitOptions.RemoveEmptyEntries).Select(t => t.Trim()).ToList();
            ExpenseService.AddExpense(NewExpense);
            Expenses = ExpenseService.GetAllExpenses();
            TotalExpenses = Expenses.Sum(e => e.Amount);
            RemainingBalance = TotalIncome - TotalExpenses;
            NewExpense = new Expense() { Date = DateTime.Now }; // Reset the form
            TagsInput = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding expense: {ex.Message}");
        }
    }

    private void DeleteExpense(int id)
    {
        try
        {
            ExpenseService.DeleteExpense(id);
            Expenses = ExpenseService.GetAllExpenses();
            TotalExpenses = Expenses.Sum(e => e.Amount);
            RemainingBalance = TotalIncome - TotalExpenses;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting expense: {ex.Message}");
        }
    }

    private void Logout()
    {
        UserService.Logout();
        NavigationManager.NavigateTo("/");
    }

    private void GoToDebtPage()
    {
        NavigationManager.NavigateTo("/dashboard/debts");
    }

    private void ClosePopup()
    {
        ShowInsufficientFundsPopup = false;
    }
}
