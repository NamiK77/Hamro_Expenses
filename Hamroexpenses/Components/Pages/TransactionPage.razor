@page "/dashboard/transactions"
@using Hamroexpenses.Services
@using Hamroexpenses.Models
@inject IncomeService IncomeService
@inject ExpenseService ExpenseService
@inject DebtService DebtService
@inject TransactionService TransactionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<head>
    <link href="css/Transaction.css" rel="stylesheet" />
</head>

<div class="transactions-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Hamro Expenses</h2>
        </div>
        <ul>
            <li><NavLink href="/dashboard" class="nav-link" Match="NavLinkMatch.All">Home</NavLink></li>
            <li><NavLink href="/dashboard/income" class="nav-link">Income</NavLink></li>
            <li><NavLink href="/dashboard/expenses" class="nav-link">Expenses</NavLink></li>
            <li><NavLink href="/dashboard/debts" class="nav-link">Debts</NavLink></li>
            <li><NavLink href="/dashboard/clear-debts" class="nav-link">Clear Debts</NavLink></li>
            <li><NavLink href="/dashboard/transactions" class="nav-link">Transaction</NavLink></li>
            <li><button class="btn logout-btn" @onclick="Logout">Logout</button></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <h3>Transactions</h3>
        <p>View, filter, sort, and search your financial transactions.</p>

        <!-- Filter Section -->
        <div class="filter-section">
            <label for="data-type">Select Data Type:</label>
            <select id="data-type" @onchange="LoadData">
                <option value="">-- Select --</option>
                <option value="Income">Income</option>
                <option value="Expenses">Expenses</option>
                <option value="Debts">Debts</option>
            </select>

            <input type="text" placeholder="Search by title..." @bind="SearchTerm" @oninput="ApplyFilters" />

            <label for="start-date">Start Date:</label>
            <input id="start-date" type="date" @bind="StartDate" />

            <label for="end-date">End Date:</label>
            <input id="end-date" type="date" @bind="EndDate" />

            <label for="sort-by">Sort By:</label>
            <select id="sort-by" @onchange="SortData">
                <option value="">-- Select --</option>
                <option value="Date">Date</option>
                <option value="Amount">Amount</option>
                <option value="Category">Category</option>
            </select>
        </div>

        <!-- Download Button -->
        <button class="btn download-btn" @onclick="DownloadTransactions">Download Transactions</button>

        <!-- Transactions Table -->
        <div class="transactions-table-container">
            <h4>Filtered Transactions</h4>
            <table class="transactions-table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Amount</th>
                        <th>Category</th>
                        <th>Date</th>
                        <th>Tags</th>
                        <th>Note</th>
                    </tr>
                </thead>
                <tbody>
                    @if (FilteredTransactions.Count > 0)
                    {
                        @foreach (var transaction in FilteredTransactions)
                        {
                            <tr>
                                <td>@transaction.Title</td>
                                <td>@transaction.Amount.ToString("C")</td>
                                <td>@transaction.Category</td>
                                <td>@(transaction.Date?.ToShortDateString() ?? "N/A")</td>
                                <td>@string.Join(", ", transaction.Tags)</td>
                                <td>@transaction.Note</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="no-data">No transactions found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Transaction> AllTransactions = new();
    private List<Transaction> FilteredTransactions = new();
    private string SelectedType = string.Empty;
    private string SearchTerm = string.Empty;
    private string SortBy = string.Empty;
    private DateTime? StartDate = null;
    private DateTime? EndDate = null;

    private void LoadData(ChangeEventArgs e)
    {
        SelectedType = e.Value?.ToString() ?? string.Empty;
        AllTransactions.Clear();

        if (SelectedType == "Income")
        {
            AllTransactions = IncomeService.GetAllIncomes()
                .Select(i => new Transaction
                    {
                        Title = i.Description ?? string.Empty,
                        Amount = i.Amount,
                        Category = i.Category ?? string.Empty,
                        Date = i.Date,
                        Tags = i.Tags ?? new List<string>(),
                        Note = i.Note ?? string.Empty
                    }).ToList();
        }
        else if (SelectedType == "Expenses")
        {
            AllTransactions = ExpenseService.GetAllExpenses()
                .Select(e => new Transaction
                    {
                        Title = e.Description ?? string.Empty,
                        Amount = e.Amount,
                        Category = e.Category ?? string.Empty,
                        Date = null,
                        Tags = e.Tags ?? new List<string>(),
                        Note = e.Note ?? string.Empty
                    }).ToList();
        }
        else if (SelectedType == "Debts")
        {
            AllTransactions = DebtService.GetAllDebts()
                .Select(d => new Transaction
                    {
                        Title = d.Description ?? string.Empty,
                        Amount = d.Amount,
                        Category = d.Category ?? string.Empty,
                        Date = d.Date,
                        Tags = d.Tags ?? new List<string>(),
                        Note = d.Note ?? string.Empty
                    }).ToList();
        }

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        FilteredTransactions = AllTransactions
            .Where(t => (string.IsNullOrEmpty(SearchTerm) || t.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
                        && (!StartDate.HasValue || t.Date >= StartDate)
                        && (!EndDate.HasValue || t.Date <= EndDate))
            .ToList();

        SortData();
    }

    private void SortData(ChangeEventArgs e = null)
    {
        if (e != null)
        {
            SortBy = e.Value?.ToString() ?? string.Empty;
        }

        FilteredTransactions = SortBy switch
        {
            "Date" => FilteredTransactions.OrderBy(t => t.Date).ToList(),
            "Amount" => FilteredTransactions.OrderBy(t => t.Amount).ToList(),
            "Category" => FilteredTransactions.OrderBy(t => t.Category).ToList(),
            _ => FilteredTransactions
        };
    }

    private async Task DownloadTransactions()
    {
        var jsonData = TransactionService.ExportTransactions();
        var base64Data = Convert.ToBase64String(jsonData);

        // Create a download link with a suggested filename (e.g., "Datadownload.json")
        var downloadLink = $"data:application/json;charset=utf-8;base64,{base64Data}";
        var fileName = "Datadownload.json";

        // Open the file download in the browser (prompting user to save it with the file name)
        var jsScript = $"var a = document.createElement('a'); a.href = '{downloadLink}'; a.download = '{fileName}'; a.click();";
        await JSRuntime.InvokeVoidAsync("eval", jsScript);
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/");
    }

    public class Transaction
    {
        public string Title { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public string Category { get; set; } = string.Empty;
        public DateTime? Date { get; set; }
        public List<string> Tags { get; set; } = new();
        public string Note { get; set; } = string.Empty;
    }
}
