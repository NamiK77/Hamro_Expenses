@page "/register"
@using Hamroexpenses.Services
@using Hamroexpenses.Models
@inject UserService UserService
@inject NavigationManager NavigationManager

<!-- Include the external CSS file -->
<head>
    <link href="css/Register.css" rel="stylesheet" />
</head>

<div class="register-container">
    <div class="register-box">
        <h3 class="register-title">Register</h3>
        <div class="register-inputs">
            <input @bind="RegisterUsername" class="input-field" placeholder="Username" />
            <input @bind="RegisterPassword" class="input-field" placeholder="Password" type="password" />
            <input @bind="RegisterEmail" class="input-field" placeholder="Email" />
            <select @bind="RegisterCurrency" class="input-field">
                <option value="">Select Currency</option>
                <option value="USD">Dollar ($)</option>
                <option value="NPR">NPR (Rs)</option>
            </select>
        </div>
        <button class="register-button" @onclick="HandleRegister">Register</button>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="register-message">@Message</p>
        }
    </div>
</div>

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string RegisterEmail = "";
    private string RegisterCurrency = "";
    private string Message = "";

    private List<User> Users = new();

    protected override void OnInitialized()
    {
        Users = UserService.LoadUsers();  // Load users from the service
    }

    private void HandleRegister()
    {
        if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword))
        {
            Message = "Username and password are required.";
            return;
        }

        if (Users.Any(u => u.Username == RegisterUsername))
        {
            Message = "Username already exists.";
            return;
        }

        var newUser = new User
            {
                Username = RegisterUsername,
                Password = UserService.HashPassword(RegisterPassword),
                Email = RegisterEmail,
                Currency = RegisterCurrency
            };

        Users.Add(newUser);
        UserService.SaveUsers(Users);

        Message = "Registration successful. Redirecting to login...";
        Task.Delay(2000).ContinueWith(_ => NavigationManager.NavigateTo("/"));
    }
}